/*
 * SMS Fusion API
 * This is the SMS Fusion API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@smsfusion.com.au
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.HLRError;
import io.swagger.client.model.OutOfCredit;
import io.swagger.client.model.SMSResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SMSApi {
    private ApiClient apiClient;

    public SMSApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SMSApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for sendSMS */
    private com.squareup.okhttp.Call sendSMSCall(String key, List<String> num, String msg, String from, String deliverby, String dlrcb, String replycb, String replyemail, Integer validity, String cc, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/sms/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (key != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "key", key));
        if (num != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("csv", "num", num));
        if (msg != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "msg", msg));
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "from", from));
        if (deliverby != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "deliverby", deliverby));
        if (dlrcb != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dlrcb", dlrcb));
        if (replycb != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "replycb", replycb));
        if (replyemail != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "replyemail", replyemail));
        if (validity != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "validity", validity));
        if (cc != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cc", cc));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendSMSValidateBeforeCall(String key, List<String> num, String msg, String from, String deliverby, String dlrcb, String replycb, String replyemail, Integer validity, String cc, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling sendSMS(Async)");
        }
        
        // verify the required parameter 'num' is set
        if (num == null) {
            throw new ApiException("Missing the required parameter 'num' when calling sendSMS(Async)");
        }
        
        // verify the required parameter 'msg' is set
        if (msg == null) {
            throw new ApiException("Missing the required parameter 'msg' when calling sendSMS(Async)");
        }
        
        
        com.squareup.okhttp.Call call = sendSMSCall(key, num, msg, from, deliverby, dlrcb, replycb, replyemail, validity, cc, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send an SMS
     * Send one or more SMS
     * @param key API Key as generated from the &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/admin/api/&#39;&gt;admin panel&lt;/a&gt; (required)
     * @param num Comma separated list of phone numbers or &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/help/msisdn/&#39;&gt;MSDISDN&lt;/a&gt;&#39;s (required)
     * @param msg Message content to send (required)
     * @param from MSISDN or vanity alphanumeric source number (optional)
     * @param deliverby UTC encoded time to send the SMS (optional)
     * @param dlrcb HTTP or HTTPS callback URL for delivery reports. Timeout for callbacks is set to 30 seconds (optional)
     * @param replycb HTTP or HTTPS callback URL for replies. Timeout for callbacks is set to 30 seconds (optional)
     * @param replyemail Email address to send replies to (optional)
     * @param validity Time in minutes to keep the SMS valid for (optional)
     * @param cc 2 character country code &lt;a href&#x3D;&#39;https://en.wikipedia.org/wiki/ISO_3166-2&#39;&gt;ISO 3166-2&lt;/a&gt; for formatting local numbers internationally (optional)
     * @return SMSResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SMSResult sendSMS(String key, List<String> num, String msg, String from, String deliverby, String dlrcb, String replycb, String replyemail, Integer validity, String cc) throws ApiException {
        ApiResponse<SMSResult> resp = sendSMSWithHttpInfo(key, num, msg, from, deliverby, dlrcb, replycb, replyemail, validity, cc);
        return resp.getData();
    }

    /**
     * Send an SMS
     * Send one or more SMS
     * @param key API Key as generated from the &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/admin/api/&#39;&gt;admin panel&lt;/a&gt; (required)
     * @param num Comma separated list of phone numbers or &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/help/msisdn/&#39;&gt;MSDISDN&lt;/a&gt;&#39;s (required)
     * @param msg Message content to send (required)
     * @param from MSISDN or vanity alphanumeric source number (optional)
     * @param deliverby UTC encoded time to send the SMS (optional)
     * @param dlrcb HTTP or HTTPS callback URL for delivery reports. Timeout for callbacks is set to 30 seconds (optional)
     * @param replycb HTTP or HTTPS callback URL for replies. Timeout for callbacks is set to 30 seconds (optional)
     * @param replyemail Email address to send replies to (optional)
     * @param validity Time in minutes to keep the SMS valid for (optional)
     * @param cc 2 character country code &lt;a href&#x3D;&#39;https://en.wikipedia.org/wiki/ISO_3166-2&#39;&gt;ISO 3166-2&lt;/a&gt; for formatting local numbers internationally (optional)
     * @return ApiResponse&lt;SMSResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SMSResult> sendSMSWithHttpInfo(String key, List<String> num, String msg, String from, String deliverby, String dlrcb, String replycb, String replyemail, Integer validity, String cc) throws ApiException {
        com.squareup.okhttp.Call call = sendSMSValidateBeforeCall(key, num, msg, from, deliverby, dlrcb, replycb, replyemail, validity, cc, null, null);
        Type localVarReturnType = new TypeToken<SMSResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send an SMS (asynchronously)
     * Send one or more SMS
     * @param key API Key as generated from the &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/admin/api/&#39;&gt;admin panel&lt;/a&gt; (required)
     * @param num Comma separated list of phone numbers or &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/help/msisdn/&#39;&gt;MSDISDN&lt;/a&gt;&#39;s (required)
     * @param msg Message content to send (required)
     * @param from MSISDN or vanity alphanumeric source number (optional)
     * @param deliverby UTC encoded time to send the SMS (optional)
     * @param dlrcb HTTP or HTTPS callback URL for delivery reports. Timeout for callbacks is set to 30 seconds (optional)
     * @param replycb HTTP or HTTPS callback URL for replies. Timeout for callbacks is set to 30 seconds (optional)
     * @param replyemail Email address to send replies to (optional)
     * @param validity Time in minutes to keep the SMS valid for (optional)
     * @param cc 2 character country code &lt;a href&#x3D;&#39;https://en.wikipedia.org/wiki/ISO_3166-2&#39;&gt;ISO 3166-2&lt;/a&gt; for formatting local numbers internationally (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendSMSAsync(String key, List<String> num, String msg, String from, String deliverby, String dlrcb, String replycb, String replyemail, Integer validity, String cc, final ApiCallback<SMSResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendSMSValidateBeforeCall(key, num, msg, from, deliverby, dlrcb, replycb, replyemail, validity, cc, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SMSResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
